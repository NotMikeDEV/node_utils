{"version":3,"file":"IPAddress.js","sourceRoot":"","sources":["../src/IPAddress.ts"],"names":[],"mappings":";;;AAAA,qCAA6C;AAE7C,MAAM,SAAS;IAGX,YAAY,OAAW,EAAE,eAAoB,CAAC,CAAC;QAC3C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAA;QACnB,IAAI,YAAY,IAAI,CAAC,CAAC,EAAE;YACpB,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,MAAM;gBAC1B,IAAI,CAAC,aAAa,GAAG,EAAE,CAAA;;gBAEvB,IAAI,CAAC,aAAa,GAAG,GAAG,CAAA;SAC/B;aAAM;YACH,IAAI,CAAC,aAAa,GAAG,YAAY,CAAA;SACpC;IACL,CAAC;IACD,IAAI,GAAG;QACH,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,MAAM;YAC1B,OAAO,CAAC,CAAA;QACZ,OAAO,CAAC,CAAA;IACZ,CAAC;IACD,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,aAAa,CAAA;IAC7B,CAAC;IACD,IAAI,IAAI;QACJ,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,MAAM;YAC1B,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAC,IAAI,EAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,CAAA;QAClE,OAAO,IAAI,CAAC,QAAQ,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,aAAa,CAAA;IACrD,CAAC;IACD,IAAI,EAAE;QACF,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAC,IAAI,EAAC,CAAC,CAAA;IACvC,CAAC;IACD,IAAI,EAAE;QACF,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,MAAM;YAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAC,WAAW,EAAC,CAAC,CAAA;QACnD,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAC,MAAM,EAAC,IAAI,EAAC,CAAC,CAAA;IACvC,CAAC;IACM,QAAQ,CAAC,UAAY,EAAE;QAC1B,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,MAAM;YAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,iBAAE,MAAM,EAAC,WAAW,IAAK,OAAO,EAAE,CAAA;QAC/D,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,iBAAE,MAAM,EAAC,IAAI,IAAK,OAAO,EAAE,CAAA;IACxD,CAAC;IACM,QAAQ;QACX,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAA;IAC/B,CAAC;CACJ;AACoB,mCAAc;AAEnC,SAAS,gBAAgB,CAAC,OAAW,EAAE,eAAoB,CAAC,CAAC;IACzD,IAAI,OAAM,CAAC,OAAO,CAAC,IAAI,QAAQ,EAAE;QAC7B,IAAI,IAAQ,CAAA;QACZ,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACzB,OAAO,IAAI,SAAS,CAAC,eAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;;YAE7H,OAAO,IAAI,SAAS,CAAC,eAAY,CAAC,OAAO,CAAC,CAAC,CAAA;KAClD;SAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,EAAE,EAAE;QACzD,IAAI,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,EAAE,EAAE,CAAC,IAAE,CAAC;YACpB,IAAI,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QACvD,OAAO,IAAI,SAAS,CAAC,eAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,CAAA;KACzD;SAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,EAAE;QACxD,IAAI,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;QAC9E,OAAO,IAAI,SAAS,CAAC,eAAY,CAAC,IAAI,CAAC,EAAE,YAAY,CAAC,CAAA;KACzD;SAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;QACjC,MAAM,OAAO,CAAC,MAAM,GAAG,SAAS,CAAA;QAChC,OAAO,IAAI,SAAS,CAAC,eAAY,CAAC,SAAS,CAAC,CAAC,CAAA;KAChD;IACD,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;IAChC,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAA;AAC1D,CAAC;AAC2B,qCAAS;AAErC,MAAa,UAAU;IAEnB,YAAY,MAAqB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QADxC,SAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAA;QAE1B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAA;IACnB,CAAC;IACD,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,EAAC,EAAE,CAAC,CAAA;IAC3E,CAAC;IACD,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAA;IACpB,CAAC;IACD,IAAI,KAAK;QACL,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAClG,OAAO,IAAI,CAAA;QACf,OAAO,KAAK,CAAA;IAChB,CAAC;CACJ;AAhBD,gCAgBC","sourcesContent":["import {parse as ParseIP6Addr} from \"ip6addr\"\n\nclass IPAddress {\n    private Addr\n    private _PrefixLength\n    constructor(Address:any, PrefixLength:number=-1) {\n        this.Addr = Address\n        if (PrefixLength == -1) {\n            if (this.Addr.kind() == \"ipv4\")\n                this._PrefixLength = 32\n            else\n                this._PrefixLength = 128\n        } else {\n            this._PrefixLength = PrefixLength\n        }\n    }\n    get ver():number {\n        if (this.Addr.kind() == \"ipv4\")\n            return 4\n        return 6\n    }\n    get PrefixLength():number {\n        return this._PrefixLength\n    }\n    get CIDR():string {\n        if (this.Addr.kind() == \"ipv4\")\n            return this.toString({format:'v4'}) + \"/\" + this._PrefixLength\n        return this.toString() + \"/\" + this._PrefixLength\n    }\n    get v4():string {\n        return this.toString({format:'v4'})\n    }\n    get v6():string {\n        if (this.Addr.kind() == \"ipv4\")\n            return this.Addr.toString({format:'v4-mapped'})\n        return this.toString({format:'v6'})\n    }\n    public toString(options:any={}):string {\n        if (this.Addr.kind() == \"ipv4\")\n            return this.Addr.toString({format:'v4-mapped', ...options})\n        return this.Addr.toString({format:'v6', ...options})\n    }\n    public toBuffer():Buffer {\n        return this.Addr.toBuffer()\n    }\n}\nexport {IPAddress as IPAddressClass}\n\nfunction IPAddressBuilder(Address:any, PrefixLength:number=-1):IPAddress {\n    if (typeof(Address) == \"string\") {\n        var Addr:any\n        if (Address.indexOf('/') > -1)\n            return new IPAddress(ParseIP6Addr(Address.substr(0, Address.indexOf('/'))), Number(Address.substr(Address.indexOf('/') + 1)))\n        else\n            return new IPAddress(ParseIP6Addr(Address))\n    } else if (Buffer.isBuffer(Address) && Address.length == 16) {\n        var IPv6 = Address.slice(0, 2).toString('hex');\n        for (var y=2; y<16; y+=2)\n            IPv6 += \":\" + Address.slice(y, y+2).toString('hex')\n        return new IPAddress(ParseIP6Addr(IPv6), PrefixLength)\n    } else if (Buffer.isBuffer(Address) && Address.length == 4) {\n        var IPv4 = Address[0] + \".\" + Address[1] + \".\" + Address[2] + \".\" + Address[3]\n        return new IPAddress(ParseIP6Addr(IPv4), PrefixLength)\n    } else if (Buffer.isBuffer(Address)) {\n        throw Address.length + \"+++++++\"\n        return new IPAddress(ParseIP6Addr(\"0.0.0.0\"))\n    }\n    console.log(\"Address:\", Address)\n    throw new Error(\"Invalid IP Address (Unknown Format)\")\n}\nexport {IPAddressBuilder as IPAddress}\n\nexport class MACAddress {\n    private _MAC = Buffer.alloc(6)\n    constructor(MAC:Buffer|undefined=Buffer.alloc(6)) {\n        this._MAC = MAC\n    }\n    toString() {\n        return this._MAC.toString('hex').replace(/(.{2})/g, \"$1:\").substr(0,17)\n    }\n    toBuffer() {\n        return this._MAC\n    }\n    get empty() {\n        if (!this._MAC[0] && !this._MAC[1] && !this._MAC[2] && !this._MAC[3] && !this._MAC[4] && !this._MAC[5])\n            return true\n        return false\n    }\n}\n\n"]}